import { InjectionToken } from '@angular/core';
export const HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhpZ2hsaWdodGpzL3NyYy9saWIvaGlnaGxpZ2h0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFzSS9DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFtQixtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBGdWxsIGRvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIGhlcmUgaHR0cHM6Ly9oaWdobGlnaHRqcy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvYXBpLmh0bWxcclxuICovXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodExpYnJhcnkge1xyXG5cclxuICAvKipcclxuICAgKiBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi4gQWNjZXB0cyB0aGUgY29kZSB0byBoaWdobGlnaHQgKHN0cmluZykgYW5kIGEgbGlzdCBvZiBvcHRpb25zIChvYmplY3QpXHJcbiAgICogQHBhcmFtIGNvZGUgQWNjZXB0cyB0aGUgY29kZSB0byBoaWdobGlnaHRcclxuICAgKiBAcGFyYW0gbGFuZ3VhZ2UgbXVzdCBiZSBwcmVzZW50IGFuZCBzcGVjaWZ5IHRoZSBsYW5ndWFnZSBuYW1lIG9yIGFsaWFzIG9mIHRoZSBncmFtbWFyIHRvIGJlIHVzZWQgZm9yIGhpZ2hsaWdodGluZ1xyXG4gICAqIEBwYXJhbSBpZ25vcmVJbGxlZ2FscyAob3B0aW9uYWwpIHdoZW4gc2V0IHRvIHRydWUgaXQgZm9yY2VzIGhpZ2hsaWdodGluZyB0byBmaW5pc2ggZXZlbiBpbiBjYXNlIG9mIGRldGVjdGluZyBpbGxlZ2FsIHN5bnRheCBmb3IgdGhlIGxhbmd1YWdlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodChjb2RlOiBzdHJpbmcsIHsgbGFuZ3VhZ2UsIGlnbm9yZUlsbGVnYWxzIH06IHsgbGFuZ3VhZ2U6IHN0cmluZywgaWdub3JlSWxsZWdhbHM6IGJvb2xlYW4gfSk6IEhpZ2hsaWdodFJlc3VsdDtcclxuXHJcbiAgLyoqXHJcbiAgICogSGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgZGV0ZWN0aW9uLlxyXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XHJcbiAgICogQHBhcmFtIGxhbmd1YWdlU3Vic2V0IEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAgKiBUaGUgc3Vic2V0IGNhbiBhbHNvIGJlIHNldCB3aXRoIGNvbmZpZ3VyZSwgYnV0IHRoZSBsb2NhbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIHRoZSBvcHRpb24gaWYgc2V0LlxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodEF1dG8odmFsdWU6IHN0cmluZywgbGFuZ3VhZ2VTdWJzZXQ6IHN0cmluZ1tdKTogSGlnaGxpZ2h0QXV0b1Jlc3VsdDtcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuXHJcbiAgICogVGhpcyBmdW5jdGlvbiBpcyB0aGUgb25lIHRvIHVzZSB0byBhcHBseSBoaWdobGlnaHRpbmcgZHluYW1pY2FsbHkgYWZ0ZXIgcGFnZSBsb2FkIG9yIHdpdGhpbiBpbml0aWFsaXphdGlvbiBjb2RlIG9mIHRoaXJkLXBhcnR5XHJcbiAgICogSmF2YVNjcmlwdCBmcmFtZXdvcmtzLlxyXG4gICAqIFRoZSBmdW5jdGlvbiB1c2VzIGxhbmd1YWdlIGRldGVjdGlvbiBieSBkZWZhdWx0IGJ1dCB5b3UgY2FuIHNwZWNpZnkgdGhlIGxhbmd1YWdlIGluIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgdGhlIERPTSBub2RlLlxyXG4gICAqIFNlZSB0aGUgc2NvcGVzIHJlZmVyZW5jZSBmb3IgYWxsIGF2YWlsYWJsZSBsYW5ndWFnZSBuYW1lcyBhbmQgc2NvcGVzLlxyXG4gICAqIEBwYXJhbSBlbGVtZW50IEVsZW1lbnQgdG8gaGlnaGxpZ2h0XHJcbiAgICovXHJcbiAgaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCBlbGVtZW50cyBvbiBhIHBhZ2UgbWF0Y2hpbmcgdGhlIGNvbmZpZ3VyZWQgY3NzU2VsZWN0b3IuIFRoZSBkZWZhdWx0IGNzc1NlbGVjdG9yIHZhbHVlIGlzICdwcmUgY29kZScsXHJcbiAgICogd2hpY2ggaGlnaGxpZ2h0cyBhbGwgY29kZSBibG9ja3MuIFRoaXMgY2FuIGJlIGNhbGxlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlIHBhZ2XigJlzIG9ubG9hZCBldmVudCBoYXMgZmlyZWQuXHJcbiAgICovXHJcbiAgaGlnaGxpZ2h0QWxsKCk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZXMgZ2xvYmFsIG9wdGlvbnM6XHJcbiAgICogQHBhcmFtIGNvbmZpZyBIaWdobGlnaHRKcyBjb25maWd1cmF0aW9uIGFyZ3VtZW50XHJcbiAgICovXHJcbiAgY29uZmlndXJlKGNvbmZpZzogSGlnaGxpZ2h0Q29uZmlnKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBuZXcgbGFuZ3VhZ2UgdG8gdGhlIGxpYnJhcnkgdW5kZXIgdGhlIHNwZWNpZmllZCBuYW1lLiBVc2VkIG1vc3RseSBpbnRlcm5hbGx5LlxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZU5hbWUgQSBzdHJpbmcgd2l0aCB0aGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgYmVpbmcgcmVnaXN0ZXJlZFxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZURlZmluaXRpb24gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGxhbmd1YWdlIGRlZmluaXRpb24uXHJcbiAgICogVGhlIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgaGxqcyBvYmplY3QgdG8gYmUgYWJsZSB0byB1c2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZGVmaW5lZCB3aXRoaW4gaXQuXHJcbiAgICovXHJcbiAgcmVnaXN0ZXJMYW5ndWFnZShsYW5ndWFnZU5hbWU6IHN0cmluZywgbGFuZ3VhZ2VEZWZpbml0aW9uOiAoKSA9PiBhbnkpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGEgbGFuZ3VhZ2UgYW5kIGl0cyBhbGlhc2VzIGZyb20gdGhlIGxpYnJhcnkuIFVzZWQgbW9zdGx5IGludGVybmFsbFxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZU5hbWU6IGEgc3RyaW5nIHdpdGggdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIGJlaW5nIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgdW5yZWdpc3Rlckxhbmd1YWdlKGxhbmd1YWdlTmFtZTogc3RyaW5nKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBuZXcgbGFuZ3VhZ2UgYWxpYXMgb3IgYWxpYXNlcyB0byB0aGUgbGlicmFyeSBmb3IgdGhlIHNwZWNpZmllZCBsYW5ndWFnZSBuYW1lIGRlZmluZWQgdW5kZXIgbGFuZ3VhZ2VOYW1lIGtleS5cclxuICAgKiBAcGFyYW0gYWxpYXM6IEEgc3RyaW5nIG9yIGFycmF5IHdpdGggdGhlIG5hbWUgb2YgYWxpYXMgYmVpbmcgcmVnaXN0ZXJlZFxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZU5hbWU6IHRoZSBsYW5ndWFnZSBuYW1lIGFzIHNwZWNpZmllZCBieSByZWdpc3Rlckxhbmd1YWdlLlxyXG4gICAqL1xyXG4gIHJlZ2lzdGVyQWxpYXNlcyhhbGlhczogc3RyaW5nIHwgc3RyaW5nW10sIHsgbGFuZ3VhZ2VOYW1lIH06IHsgbGFuZ3VhZ2VOYW1lOiBzdHJpbmcgfSk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlcyBuYW1lcyBsaXN0LlxyXG4gICAqL1xyXG4gIGxpc3RMYW5ndWFnZXMoKTogc3RyaW5nW107XHJcblxyXG4gIC8qKlxyXG4gICAqIExvb2tzIHVwIGEgbGFuZ3VhZ2UgYnkgbmFtZSBvciBhbGlhcy5cclxuICAgKiBAcGFyYW0gbmFtZSBMYW5ndWFnZSBuYW1lXHJcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2Ugb2JqZWN0IGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIGdldExhbmd1YWdlKG5hbWU6IHN0cmluZyk6IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5hYmxlcyBzYWZlIG1vZGUuIFRoaXMgaXMgdGhlIGRlZmF1bHQgbW9kZSwgcHJvdmlkaW5nIHRoZSBtb3N0IHJlbGlhYmxlIGV4cGVyaWVuY2UgZm9yIHByb2R1Y3Rpb24gdXNhZ2UuXHJcbiAgICovXHJcbiAgc2FmZU1vZGUoKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5hYmxlcyBkZWJ1Zy9kZXZlbG9wbWVudCBtb2RlLlxyXG4gICAqL1xyXG4gIGRlYnVnTW9kZSgpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBBZGQgbGluZSBudW1iZXJzIHRvIGNvZGUgZWxlbWVudFxyXG4gICAqIEBwYXJhbSBlbCBDb2RlIGVsZW1lbnRcclxuICAgKi9cclxuICBsaW5lTnVtYmVyc0Jsb2NrKGVsOiBFbGVtZW50KTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRDb25maWcge1xyXG4gIC8qKiBjbGFzc1ByZWZpeDogYSBzdHJpbmcgcHJlZml4IGFkZGVkIGJlZm9yZSBjbGFzcyBuYW1lcyBpbiB0aGUgZ2VuZXJhdGVkIG1hcmt1cCwgdXNlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBzdHlsZXNoZWV0cy4gKi9cclxuICBjbGFzc1ByZWZpeD86IHN0cmluZztcclxuICAvKiogbGFuZ3VhZ2VzOiBhbiBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBhdXRvIGRldGVjdGlvbiB0byBvbmx5IHRoZXNlIGxhbmd1YWdlcy4gKi9cclxuICBsYW5ndWFnZXM/OiBzdHJpbmdbXTtcclxuICAvKiogbGFuZ3VhZ2VEZXRlY3RSZTogYSByZWdleCB0byBjb25maWd1cmUgaG93IENTUyBjbGFzcyBuYW1lcyBtYXAgdG8gbGFuZ3VhZ2UgKGFsbG93cyBjbGFzcyBuYW1lcyBsaWtlIHNheSBjb2xvci1hcy1waHAgdnMgdGhlIGRlZmF1bHQgb2YgbGFuZ3VhZ2UtcGhwLCBldGMuKSAqL1xyXG4gIGxhbmd1YWdlRGV0ZWN0UmU6IHN0cmluZztcclxuICAvKiogbm9IaWdobGlnaHRSZTogYSByZWdleCB0byBjb25maWd1cmUgd2hpY2ggQ1NTIGNsYXNzZXMgYXJlIHRvIGJlIHNraXBwZWQgY29tcGxldGVseS4gKi9cclxuICBub0hpZ2hsaWdodFJlOiBzdHJpbmc7XHJcbiAgLyoqIGEgQ1NTIHNlbGVjdG9yIHRvIGNvbmZpZ3VyZSB3aGljaCBlbGVtZW50cyBhcmUgYWZmZWN0ZWQgYnkgaGxqcy5oaWdobGlnaHRBbGwuIERlZmF1bHRzIHRvICdwcmUgY29kZScuICovXHJcbiAgY3NzU2VsZWN0b3I6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRSZXN1bHQge1xyXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xyXG4gIHZhbHVlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIHJlbGV2YW5jZT86IG51bWJlcjtcclxuICB0b3A6IGFueTtcclxuICBjb2RlOiBzdHJpbmc7XHJcbiAgaWxsZWdhbDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRBdXRvUmVzdWx0IHtcclxuICBsYW5ndWFnZT86IHN0cmluZztcclxuICBzZWNvbmRCZXN0PzogYW55O1xyXG4gIHZhbHVlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIHJlbGV2YW5jZT86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRPcHRpb25zIHtcclxuICBjb25maWc/OiBIaWdobGlnaHRDb25maWc7XHJcbiAgbGFuZ3VhZ2VzPzogUmVjb3JkPHN0cmluZywgKCkgPT4gUHJvbWlzZTxhbnk+PjtcclxuICBjb3JlTGlicmFyeUxvYWRlcj86ICgpID0+IFByb21pc2U8YW55PjtcclxuICBmdWxsTGlicmFyeUxvYWRlcj86ICgpID0+IFByb21pc2U8YW55PjtcclxuICBsaW5lTnVtYmVyc0xvYWRlcj86ICgpID0+IFByb21pc2U8YW55PjtcclxuICB0aGVtZVBhdGg/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBISUdITElHSFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIaWdobGlnaHRPcHRpb25zPignSElHSExJR0hUX09QVElPTlMnKTtcclxuIl19